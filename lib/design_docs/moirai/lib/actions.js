// Generated by CoffeeScript 1.9.3
(function() {
  var _, a, do_action, validate_doc_update;

  do_action = require('pantheon-helpers').design_docs.do_action;

  validate_doc_update = require('pantheon-helpers').design_docs.validate_doc_update.validate_doc_update;

  _ = require('underscore');

  a = {};

  a.get_doc_type = function(doc) {
    if (doc._id.indexOf('_') < 0) {
      return void 0;
    }
    return doc._id.split('_')[0];
  };

  a.do_actions = {
    cluster: {
      'c-': function(doc, action, actor) {
        return doc.instances.forEach(function(instance) {
          return instance.state = 'terminate';
        });
      },
      'k': function(doc, action, actor) {
        return doc.keys = action.keys;
      }
    },
    create: {
      'c+': function(doc, action, actor) {
        return _.extend(doc, {
          _id: 'cluster_' + doc._id,
          name: action.record.name,
          created: action.createdTimestamp,
          shutdown: action.scheduledShutdown,
          instances: action.record.instances.map(function(instance) {
            return {
              id: instance.id,
              name: instance.tags.Name,
              size: instance.InstanceType
            };
          })
        });
      }
    }
  };

  a.validate_actions = {
    cluster: {
      'c+': function(event, actor, old_doc, new_doc) {},
      'c-': function(event, actor, old_doc, new_doc) {},
      'k': function(event, actor, old_doc, new_doc) {
        var i, isPubKeyValid, key, len, ref, results;
        if (!_.isArray(event.keys)) {
          throw {
            state: 'invalid',
            err: '`keys` should be an array, but got ' + JSON.stringify(event.keys)
          };
        }
        isPubKeyValid = function(key) {
          return key.match(/^ssh-rsa AAAA[0-9A-Za-z+\/]+[=]{0,3} [0-9A-Za-z.-]+(@[0-9A-Za-z.-]+)?$/);
        };
        ref = event.keys;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          key = ref[i];
          if (!isPubKeyValid(key)) {
            throw {
              state: 'invalid',
              err: 'invalid public key: ' + key
            };
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }
  };

  a.do_action = do_action(a.do_actions, a.get_doc_type);

  a.validate_doc_update = validate_doc_update(a.validate_actions, a.get_doc_type);

  a.mixin = function(dd) {
    dd.validate_doc_update = a.validate_doc_update;
    return dd.updates.do_action = a.do_action;
  };

  module.exports = a;

}).call(this);
